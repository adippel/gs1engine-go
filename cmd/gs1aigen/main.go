package main

import (
	"bytes"
	"errors"
	"flag"
	"fmt"
	"io"
	"log"
	"os"
	"text/template"

	"github.com/adippel/gs1engine-go"
)

const tmpl = `// DO NOT EDIT.
// Code generated by github.com/adippel/go-gs1engine/gs1aigen. 

package {{ .PackageName }}
{{ $structName := .AIStructName }}
{{- if not .DisableStructDeclaration }}
// {{ $structName }} describes a GS1 Application Identifier (AI) as defined in the GS1 Syntax Dictionary.
type {{ $structName }} struct {
	// AI is a unique identifier for a class of objects (e.g., trade items) or an instance of an object
	// (e.g., logistic unit).
	AI string
	// Flags indicate specific characteristics about an AI (e.g. pre-defined length).
	Flags string
	// Specification consists of multiple components specify the character set, data format, and
	// data structure required for the AI.
	Specification []string
	// Attributes enable associations of AIs, to ensure mandatory or invalid AI pairs, including primary key and key
	// qualifier sequences for GS1 Digital Link URI syntax
	Attributes []string
	// Title is the data title supporting human understanding of the AI.
	Title string
}
{{- end }}

// Go descriptions for the GS1 Application Identifier. Enable seamless parsing and validation of GS1 messages.
var (
{{- range .AIs }}
	// AI{{ .AI }} describes a {{ .Title }}. See also https://ref.gs1.org/ai/{{ .AI }}.
	AI{{ .AI }} = {{ $structName }}{
		AI:				"{{ .AI }}",
		Flags:         	"{{ .Flags }}",
		Specification: 	[]string{ {{- range .Specification -}} "{{- . -}}", {{- end -}} },
		Attributes:    	[]string{ {{- range .Attributes -}} "{{- . -}}", {{- end -}} },
		Title:         	"{{ .Title }}",
	}
{{- end }}
)

// AIRegistry is a lookup table mapping a GS1 AI to its corresponding [{{ $structName }}].
var AIRegistry = map[string]{{ $structName}}{
{{- range .AIs }}
	"{{ .AI }}":	AI{{ .AI }},
{{- end }}
}
`

type cliOpts struct {
	OutFile                  string
	SyntaxDictionaryRelease  string
	PackageName              string // the name to use when rendering the registry
	AIStructName             string // the struct to use for every [gs1.ApplicationIdentifierSpec]
	DisableStructDeclaration bool   // controls creation of the default struct declaration; uses AIStructName
}

const defaultSyntaxDictionaryRelease = "2025-01-30"

// generateAIRegistry generates ApplicationIdentifier and a lookup table from the given ais.
func generateAIRegistry(out io.Writer, ais []gs1.ApplicationIdentifierSpec, opts cliOpts) error {
	if opts.AIStructName == "" {
		return errors.New("AI struct name is required")
	}

	tplOpts := struct {
		cliOpts
		AIs []gs1.ApplicationIdentifierSpec
	}{
		cliOpts: opts,
		AIs:     ais,
	}

	t, err := template.New("ai").Parse(tmpl)
	if err != nil {
		return err
	}

	tempOut := bytes.Buffer{}
	err = t.Execute(&tempOut, tplOpts)
	if err != nil {
		return fmt.Errorf("error executing template: %w", err)
	}
	_, err = io.Copy(out, &tempOut)
	if err != nil {
		return fmt.Errorf("error copying template: %w", err)
	}

	return nil
}

func main() {
	var cliOpts cliOpts

	flag.StringVar(&cliOpts.PackageName, "package", "main", "Package name to use")
	flag.StringVar(&cliOpts.OutFile, "out", "airegistry.go", "Path to the output file")
	flag.StringVar(&cliOpts.SyntaxDictionaryRelease, "release", defaultSyntaxDictionaryRelease, "Syntax Dictionary release to use")
	flag.StringVar(&cliOpts.AIStructName, "struct-name", "ApplicationIdentifier", "Name of the struct to use for generating")
	flag.BoolVar(&cliOpts.DisableStructDeclaration, "disable-struct-gen", false, "Disables default AI struct declaration generation")
	flag.Parse()

	data, err := gs1.DownloadSyntaxDictionary(cliOpts.SyntaxDictionaryRelease)
	if err != nil {
		panic(err)
	}

	ais, error := gs1.ParseSyntaxDictionary(&data)
	if error != nil {
		panic(error)
	}

	f, err := os.Create(cliOpts.OutFile)
	if err != nil {
		log.Fatal(err)
	}
	defer f.Close()

	err = generateAIRegistry(f, ais, cliOpts)
	if err != nil {
		log.Fatal(err)
	}

	fmt.Printf("Wrote %s\n", cliOpts.OutFile)
}
