package gs1

import (
	"fmt"
	"strconv"
	"strings"
)

type ApplicationIdentifierInfo struct {
	AIDescription
}

// RequiresFNC1Separator checks if the AI description declares the flag '*'.
func (ai ApplicationIdentifierInfo) RequiresFNC1Separator() bool {
	return !strings.ContainsRune(ai.Flags, '*')
}

func (ai ApplicationIdentifierInfo) HasFixedLength() bool {
	return !ai.RequiresFNC1Separator()
}

func (ai ApplicationIdentifierInfo) Length() int {
	if !ai.HasFixedLength() {
		return -1
	}

	lengthSpec := ai.Specification[0]
	// Remove the leading character class: N,Y,X
	lengthStr := lengthSpec[1:]
	length, err := strconv.Atoi(lengthStr)
	if err != nil {
		return -1
	}

	return length
}

func NewElementString(ai AIDescription, data string) ElementString {
	return ElementString{
		ApplicationIdentifierInfo: ApplicationIdentifierInfo{ai},
		DataField:                 data,
	}
}

// ElementString is the combination of a GS1 Application Identifier and a GS1 Application Identifier Elements Field. An
// ElementString can be carried by GS1-128, GS1 DataBar Symbology, GS1 Composite, and GS1 DataMatrix and GS1 QR Code
// Symbols.
type ElementString struct {
	ApplicationIdentifierInfo
	DataField string
}

func (ai ElementString) String() string {
	return fmt.Sprintf("(%s)%s", ai.AIDescription.AI, ai.DataField)
}

// SymbologyType as defined in GS1 General Specification v25.0, chapter 5.1.3.
type SymbologyType string

const (
	UnknownSymbology   SymbologyType = ""
	GS1128             SymbologyType = "C"
	GS1DataBar         SymbologyType = "e"
	GS1Composite       SymbologyType = "e"
	GS1DataMatrix      SymbologyType = "d"
	GS1QRCode          SymbologyType = "Q"
	GS1DotCode         SymbologyType = "J"
	GSDataMatrixECC200 SymbologyType = "d"
)

// SymbologyIdentifier as defined in GS1 General Specification v25.0, chapter 5.1.3.
type SymbologyIdentifier struct {
	Type SymbologyType
	Mode int
}

type DataSyntaxType string

const (
	UnknownSyntax          DataSyntaxType = "Unknown"
	ElementStringSyntax    DataSyntaxType = "ElementStringSyntax"
	BarcodeMessageFormat   DataSyntaxType = "BarcodeMessageFormat"
	BarcodeMessageScanData DataSyntaxType = "BarcodeMessageScanData"
)

// DataMessage describes a GS1 message together with its Symbology, SyntaxType and the Elements describing the message.
// This struct is typically parsed from input. For example using [ParseDataMessage].
type DataMessage struct {
	// Symbology is not encoded in the barcode but is generated by the decoder after decoding and is transmitted as a
	// preamble to the data message.
	Symbology SymbologyIdentifier
	// SyntaxType specifies which syntax is used to encode/decode the message.
	SyntaxType DataSyntaxType
	Elements   []ElementString
}

// AsElementString returns the DataMessage in the element string syntax, e.g. (01)01234567890128(15)057072.
func (d DataMessage) AsElementString() string {
	builder := strings.Builder{}
	for _, datum := range d.Elements {
		builder.WriteString("(")
		builder.WriteString(datum.AI)
		builder.WriteString(")")
		builder.WriteString(datum.DataField)
	}
	return builder.String()
}
